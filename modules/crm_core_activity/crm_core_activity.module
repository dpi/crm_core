<?php

/**
 * @file
 * Provides an entity for recording a contact's activities.
 */

use Drupal\crm_core_activity\Entity\Activity;
use Drupal\crm_core_activity\Entity\ActivityType;

/* ***************************************************************************
 * ***  CRM Activity helpers  ************************************************
 * ************************************************************************* */

/**
 * Implements hook_field_extra_fields().
 */
function crm_core_activity_field_extra_fields() {
  $extra = array();

  foreach (ActivityType::loadMultiple() as $type) {
    $extra['crm_core_activity'][$type->type] = array(
      'form' => array(
        'title' => array(
          'label' => 'Title',
          'description' => t('CRM Core Activity module element'),
          'weight' => -5,
        ),
      ),
    );
  }

  return $extra;
}

/* ***************************************************************************
 * ***  CRM Activity Type helpers  *******************************************
 * ************************************************************************* */

/**
 * Implements hook_forms().
 *
 * Create form for adding/editing crm_activity.
 * Their id is like 'crm_activity_edit_' . $bundle . '_form'.
 *
 * @see entity_ui_get_form()
 */
function crm_core_activity_forms($form_id, $args) {
  $forms = array();

  // Check whether it is crm_activity form.
  if (strpos($form_id, 'crm_core_activity_edit_') === 0) {
    $forms[$form_id] = array(
      'callback' => 'crm_core_activity_form',
    );
  }

  return $forms;
}

/**
 * Activity view callback.
 */
function crm_core_activity_view($activity, $view_mode = 'full') {
  $langcode = $GLOBALS['language_content']->language;
  module_invoke_all('entity_view', $activity, 'crm_core_activity', $view_mode, $langcode);
  $build = $activity->view('full', $langcode);

  return $build;
}

/**
 * Implements hook_views_api().
 */
function crm_core_activity_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'crm_core_activity') . '/views',
  );
}

/**
 * Implements hook_crm_core_contact_delete().
 *
 * Adjusts Activities where contact is used in primary participants.
 */
function crm_core_activity_crm_core_contact_delete($crm_core_contact) {
  $query = new EntityFieldQuery();
  $results = $query
    ->entityCondition('entity_type', 'crm_core_activity')
    ->fieldCondition('field_activity_participants', 'target_id', $crm_core_contact->contact_id)
    ->execute();

  if (empty($results)) {
    // No related Activities.
    return;
  }

  // Load fully populated Activity objects to analyze/update.
  $activity_ids = array_keys($results['crm_core_activity']);
  $crm_core_activities = Activity::loadMultiple($activity_ids);

  $activities_to_remove = array();

  foreach ($crm_core_activities as $crm_core_activity) {
    $wrapped_activity = entity_metadata_wrapper('crm_core_activity', $crm_core_activity);
    $participants = $wrapped_activity->field_activity_participants->value(array('identifier' => TRUE));

    // Remove Contact from participants array.
    $participants = array_diff($participants, array($crm_core_contact->contact_id));

    if (empty($participants)) {
      // Last main participant was deleted, so we should kill entire activity.
      $activities_to_remove[] = $crm_core_activity->activity_id;
    }
    else {
      // Save Activity with renewed list.
      $wrapped_activity->field_activity_participants->set($participants);
      $crm_core_activity->save();
    }
  }

  if (!empty($activities_to_remove)) {
    watchdog('crm_core_activity', 'Deleted !count activities due to deleting contact id=%contact_id.',
      array(
        '!count' => count($activities_to_remove),
        '%contact_id' => $crm_core_contact->contact_id,
      ), WATCHDOG_INFO);
    \Drupal::entityTypeManager()->getStorage('crm_core_activity')->delete($activities_to_remove);
  }
}

/**
 * Implements hook_search_info().
 */
function crm_core_activity_search_info() {
  return array(
    'title' => t('CRM Core activities'),
    'path' => 'activity',
  );
}

/**
 * Implements hook_search_access().
 */
function crm_core_activity_search_access() {
  return user_access('administer crm_core_activity entities') || user_access('view any crm_core_activity entity');
}

/**
 * Implements hook_search_reset().
 */
function crm_core_activity_search_reset() {
  db_update('search_dataset')
    ->fields(array('reindex' => REQUEST_TIME))
    ->condition('type', 'crm_core_activity')
    ->execute();
}

/**
 * Implements hook_search_status().
 */
function crm_core_activity_search_status() {
  $total = db_query('SELECT COUNT(*) FROM {crm_core_activity}')->fetchField();
  $remaining = db_query("SELECT COUNT(*) FROM {crm_core_activity} a LEFT JOIN {search_dataset} d ON d.type = 'crm_core_activity' AND d.sid = a.activity_id WHERE d.sid IS NULL OR d.reindex <> 0")->fetchField();
  return array('remaining' => $remaining, 'total' => $total);
}

/**
 * Implements hook_search_execute().
 */
function crm_core_activity_search_execute($keys = NULL, $conditions = NULL) {
  $query = db_select('search_index', 'i', array('target' => 'slave'))->extend('SearchQuery')->extend('PagerDefault');
  $query->join('crm_core_activity', 'a', 'a.activity_id = i.sid');
  $query->searchExpression($keys, 'crm_core_activity');

  // Insert special keywords.
  $query->setOption('type', 'a.type');
  $query->setOption('language', 'a.language');

  // Only continue if the first pass query matches.
  if (!$query->executeFirstPass()) {
    return array();
  }

  // Load results.
  $find = $query
    ->limit(10)
    ->execute();
  $results = array();
  foreach ($find as $item) {
    // Render the contact.
    $activity = Activity::load($item->sid);
    $build = crm_core_activity_view($activity);
    unset($build['#theme']);
    $activity->rendered = drupal_render($build);
    $uri = entity_uri('crm_core_activity', $activity);
    $results[] = array(
      'link' => url($uri['path'], array_merge($uri['options'], array('absolute' => TRUE))),
      'type' => $activity->get('type')->entity->label(),
      'title' => check_plain($activity->title),
      'user' => theme('username', array('account' => user_load($activity->uid))),
      'date' => $activity->changed,
      'contact' => $activity,
      'score' => $item->calculated_score,
      'snippet' => search_excerpt($keys, $activity->rendered),
      'language' => (isset($activity->language)) ? $activity->language : LANGUAGE_NONE,
    );
  }
  return $results;
}

/**
 * Search condition callback.
 */
function crm_core_activity_search_conditions_callback($keys) {
  $conditions = array();

  if (!empty($_REQUEST['keys'])) {
    $conditions['keys'] = $_REQUEST['keys'];
  }
  if (!empty($_REQUEST['sample_search_keys'])) {
    $conditions['sample_search_keys'] = $_REQUEST['sample_search_keys'];
  }
  if ($force_keys = variable_get('sample_search_force_keywords', '')) {
    $conditions['sample_search_force_keywords'] = $force_keys;
  }

  return $conditions;
}

/**
 * Implements hook_update_index().
 */
function crm_core_activity_update_index() {
  $limit = (int) variable_get('search_cron_limit', 100);

  $result = db_query_range("SELECT a.activity_id FROM {crm_core_activity} a LEFT JOIN {search_dataset} d ON d.type = 'crm_core_activity' AND d.sid = a.activity_id WHERE d.sid IS NULL OR d.reindex <> 0 ORDER BY d.reindex ASC, a.activity_id ASC", 0, $limit);

  foreach ($result as $activity) {
    $activity = Activity::load($activity->activity_id);
    variable_set('crm_core_activity_cron_last', $activity->changed);

    // Render the activity.
    $text = drupal_render(crm_core_activity_view($activity));
    search_index($activity->activity_id, 'crm_core_activity', $text);
  }
}

/**
 * Implements hook_feeds_plugins().
 */
function crm_core_activity_feeds_plugins() {
  $info['CRMFeedsActivityProcessor'] = array(
    'name' => 'CRM Activity processor',
    'description' => 'Create and update CRM activities.',
    'help' => 'Create and update CRM activities from parsed content.',
    'handler' => array(
      'parent' => 'FeedsProcessor',
      'class' => 'CRMFeedsActivityProcessor',
      'file' => 'CRMFeedsActivityProcessor.inc',
      'path' => drupal_get_path('module', 'crm_core_activity') . '/includes',
    ),
  );
  return $info;
}

/**
 * Implements hook_file_download_access().
 */
function crm_core_activity_file_download_access($field, Drupal\Core\Entity\EntityInterface $entity, Drupal\file\FileInterface $file) {
  if ($entity->bundle() == 'crm_core_activity') {
    return $entity->access('view');
  }
}
