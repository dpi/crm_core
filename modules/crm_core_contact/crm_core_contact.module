<?php

/**
 * @file
 * Provides default CRM Core Contact entities and the ability to create more.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\crm_core_contact\Entity\Contact;
use Drupal\Core\Render\Element;

/**
 * Implements hook_theme().
 */
function crm_core_contact_theme() {
  return array(
    'crm_core_contact' => array(
      'render element' => 'elements',
      'template' => 'crm-core-contact',
    ),
    'crm_core_contact_merge_table' => array(
      'render element' => 'table',
      'file' => 'theme/crm_core_contact.theme.inc',
    ),
  );
}

/**
 * Process variables for CRM Core Contact.
 *
 * Default template: crm_core_contact.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - crm_core_contact: The CRM Core Contact entity.
 */
function template_preprocess_crm_core_contact(&$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  /** @var \Drupal\crm_core_contact\Entity\Contact $contact */
  $contact = $variables['elements']['#crm_core_contact'];
  $variables['crm_core_contact'] = $contact;

  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  // Add classes based on the type of contact.
  $variables['attributes']['class'][] = 'crm_core_contact';
  $variables['attributes']['class'][] = 'crm_core_contact-' . $contact->bundle();
}

/**
 * Implements hook_theme_suggestions_HOOK().
 *
 * This function simply adds template suggestions for various
 * contact types.
 */
function crm_core_contact_theme_suggestions_crm_core_contact(array $variables) {
  $suggestions = array();
  /** @var \Drupal\crm_core_contact\Entity\Contact $crm_core_contact */
  $crm_core_contact = $variables['elements']['#crm_core_contact'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  // Add template suggestions.
  $suggestions[] = 'crm_core_contact__' . $sanitized_view_mode;
  $suggestions[] = 'crm_core_contact__' . $crm_core_contact->bundle();
  $suggestions[] = 'crm_core_contact__' . $crm_core_contact->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'crm_core_contact__' . $crm_core_contact->id();
  $suggestions[] = 'crm_core_contact__' . $crm_core_contact->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_action_info().
 *
 * Adds 2 action:
 *  - merge 2 or more contacts into household contact(non destructive)
 *  - merge 2 or more contacts(destructive)
 */
function crm_core_contact_action_info() {
  return array(
    'crm_core_contact_join_into_household_action' => array(
      'type' => 'crm_core_contact',
      'label' => t('Join into household'),
      'configurable' => TRUE,
      'triggers' => array('any'),
      'aggregate' => TRUE,
    ),
    'crm_core_contact_merge_contacts_action' => array(
      'type' => 'crm_core_contact',
      'label' => t('Merge contacts'),
      'configurable' => TRUE,
      'triggers' => array('any'),
      'aggregate' => TRUE,
    ),
    'crm_core_contact_send_email_action' => array(
      'type' => 'crm_core_contact',
      'label' => t('Send e-mail to contacts'),
      'configurable' => TRUE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Form builder for creating a household.
 */
function crm_core_contact_join_into_household_action_form($context, &$form_state) {
  $household = entity_create('crm_core_contact', array('type' => 'household'));
  $form = crm_core_contact_form(array(), $form_state, $household);

  return $form;
}

/**
 * Validate handler for action configuration form.
 */
function crm_core_contact_join_into_household_action_validate($form, $form_state) {
  $household =& $form_state['crm_core_contact'];
  field_attach_form_validate('crm_core_contact', $household, $form, $form_state);
}

/**
 * Submit handler for action configuration form.
 */
function crm_core_contact_join_into_household_action_submit($form, $form_state) {
  $household =& $form_state['crm_core_contact'];
  field_attach_submit('crm_core_contact', $household, $form, $form_state);

  return array('household' => $household);
}

/**
 * Creates household with specified members.
 */
function crm_core_contact_join_into_household_action($selected_contacts, $context) {
  $household = $context['household'];
  // Saving household only now because user can click "Cancel" on confirmation
  // page(if he/she will notice that selected wrong contacts).
  $household->uid = $GLOBALS['user']->uid;
  $household->save();
  $relation_type = 'crm_member';
  foreach ($selected_contacts as $member) {

    if ($member->type == 'individual') {
      $endpoints = array(
        0 => array(
          'entity_type' => 'crm_core_contact',
          'entity_id' => $member->contact_id,
        ),
        1 => array(
          'entity_type' => 'crm_core_contact',
          'entity_id' => $household->contact_id,
        ),
      );
      $relation = relation_create($relation_type, $endpoints);
      relation_save($relation);
    }
  }
}

/**
 * Form builder for merging contacts.
 */
function crm_core_contact_merge_contacts_action_form($context, &$form_state) {

  $form = array();
  $selected_contacts = Contact::loadMultiple($form_state['selection']);
  // Lets check contacts type, it should be unique.
  $contact_types = array();
  foreach ($selected_contacts as $contact) {
    $contact_types[] = $contact->type;
  }
  $contact_types = array_unique($contact_types);
  // All selected contacts have same type.
  if (count($contact_types) != 1) {
    $message = 'You should select contacts of one type to be able to merge them!';
    drupal_set_message(t($message), 'error');
    drupal_goto('crm-core/contact');
  }
  else {
    $form['table'] = array(
      '#theme' => 'crm_core_contact_merge_table',
      '#tree' => TRUE,
      '#selected' => $form_state['selection'],
    );
    // Creating header.
    $header['field_name'] = array('#markup' => t('Field name\\Contact'));
    foreach ($selected_contacts as $contact) {
      $header[$contact->contact_id] = array(
        '#type' => 'radio',
        '#title' => check_plain($contact->label()),
      );
    }
    $form['table']['contact_id'] = $header;
    $field_instances = field_info_instances('crm_core_contact', array_shift($contact_types));
    foreach ($field_instances as $field_name => $field_instance) {
      $form['table'][$field_name] = array();
      $row =& $form['table'][$field_name];
      $row['field_name'] = array('#markup' => check_plain($field_instance['label']));
      foreach ($selected_contacts as $contact) {
        $field_value = array('#markup' => '');
        if (isset($contact->{$field_name}[LANGUAGE_NONE][0])) {
          $item = $contact->{$field_name}[LANGUAGE_NONE][0];
          $field_value_render = field_view_value('crm_core_contact', $contact, $field_name, $item);
          $field_value_rendered = drupal_render($field_value_render);
          // This check is a must because some fields can provide empty markup.
          if (!empty($field_value_rendered)) {
            $field_value = array(
              '#type' => 'radio',
              '#title' => $field_value_rendered,
            );
          }
        }
        $row[$contact->contact_id] = $field_value;
      }
    }
  }

  $form['#attached']['js'] = array(
    drupal_get_path('module', 'crm_core_contact') . '/js/merge_table.js',
  );

  return $form;
}

/**
 * Validate handler for action configuration form.
 */
function crm_core_contact_merge_contacts_action_validate($form, FormStateInterface $form_state) {
  $table = $form_state->getValue('table');
  $primary_contact = array_filter($table['contact_id']);
  if (empty($primary_contact)) {
    form_set_error('table][contact_id', t('You must select primary contact in table header!'));
  }
  if (count($primary_contact) > 1) {
    form_set_error('table][contact_id', t('Supplied more than one primary contact!'));
  }
}

/**
 * Submit handler for action configuration form.
 */
function crm_core_contact_merge_contacts_action_submit($form, FormStateInterface $form_state) {
  $table = $form_state->getValue('table');
  $tmp = array_keys(array_filter($table['contact_id']));
  $data = array('contact_id' => array_shift($tmp));
  unset($table['contact_id']);
  foreach ($table as $field_name => $selection) {
    $tmp = array_keys(array_filter($selection));
    $data[$field_name] = array_shift($tmp);
  }

  return array('data' => array_filter($data));
}

/**
 * Merge contacts.
 */
function crm_core_contact_merge_contacts_action($selected_contacts, $context) {
  $data = $context['data'];
  $primary_contact = $selected_contacts[$data['contact_id']];
  $pcid = $primary_contact->contact_id;
  $pcw = entity_metadata_wrapper('crm_core_contact', $primary_contact);
  unset($selected_contacts[$data['contact_id']]);
  unset($data['contact_id']);
  $wrappers = array();
  foreach ($selected_contacts as $cid => $contact) {
    $wrappers[$cid] = entity_metadata_wrapper('crm_core_contact', $contact);
  }
  // Updating primary contact fields from other selected contacts.
  foreach ($data as $field_name => $contact_id) {
    if ($pcid != $contact_id) {
      $pcw->{$field_name}->set($wrappers[$contact_id]->{$field_name}->value());
    }
  }
  $pcw->save();
  foreach (array_keys($selected_contacts) as $contact_id) {
    // Creating path aliases for contacts that will be deleted.
    $path = array(
      'alias' => 'crm-core/contact/' . $contact_id,
      'source' => 'crm-core/contact/' . $pcid,
    );
    path_save($path);

    if (module_exists('crm_core_activity')) {
      // Replacing participant in existing activities.
      $query = new EntityFieldQuery();
      $activities = $query->entityCondition('entity_type', 'crm_core_activity')
        ->fieldCondition('field_activity_participants', 'target_id', $contact_id)
        ->fieldCondition('field_activity_participants', 'target_type', 'crm_core_contact')
        ->execute();
      if (is_array($activities) && isset($activities['crm_core_activity'])) {
        foreach (array_keys($activities['crm_core_activity']) as $activity_id) {
          $aw = entity_metadata_wrapper('crm_core_activity', $activity_id);
          foreach ($aw->field_activity_participants->getIterator() as $delta => $cw) {
            if ($cw->getIdentifier() == $contact_id) {
              $aw->field_activity_participants[$delta]->set($pcid);
            }
          }
          $aw->save();
        }
      }
    }

    if (module_exists('relation')) {
      // Replacing existing relations for contacts been deleted with new ones.
      $relations = relation_query('crm_core_contact', $contact_id)->execute();
      foreach ($relations as $relation_info) {
        $endpoints = array(
          array('entity_type' => 'crm_core_contact', 'entity_id' => $pcid),
        );
        $relation_wrapper = entity_metadata_wrapper('relation', $relation_info->rid);
        foreach ($relation_wrapper->endpoints->getIterator() as $endpoint_wrapper) {
          if ($endpoint_wrapper->getIdentifier() != $contact_id) {
            $endpoints[] = array(
              'entity_type' => $endpoint_wrapper->type(),
              'entity_id' => $endpoint_wrapper->getIdentifier(),
            );
          }
        }

        $relation = relation_create($relation_info->relation_type, $endpoints);
        relation_save($relation);
      }
    }
  }

  module_invoke_all('crm_core_contact_merge_contacts', $primary_contact, $selected_contacts);
  \Drupal::entityTypeManager()->getStorage('crm_core_contact')->delete(array_keys($selected_contacts));
  $count = count($selected_contacts);
  $singular = '%contacts contact merged to %dest.';
  $plural = '%contacts contacts merged to %dest.';
  $contacts_label = array();
  foreach ($selected_contacts as $contact) {
    $contacts_label[] = $contact->label();
  }
  $message = format_plural($count, $singular, $plural, array(
    '%contacts' => implode(', ', $contacts_label),
    '%dest' => $primary_contact->label(),
  ));
  drupal_set_message($message);
}

/**
 * Form builder for 'crm_core_contact_send_email_action' action.
 */
function crm_core_contact_send_email_action_form($context, FormStateInterface $form_state) {

  $form = array();
  $form['subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#description' => t('The subject of the message.'),
    '#default_value' => $form_state->getValue('subject', ''),
  );

  $form['message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#description' => t('The message that should be sent.'),
    '#default_value' => $form_state->getValue('message', ''),
  );

  // Display a list of tokens that can be used in the message.
  if (module_exists('token')) {
    // Lets extend description of message field.
    $token_description = 'You may include placeholders here to represent data'
      . ' that will be different each time message is sent. You can find list'
      . ' of available placeholder in the table below.';
    $form['message']['#description'] .= t($token_description);

    // We must load token values here to show them on the options form.
    drupal_add_js(drupal_get_path('module', 'token') . '/token.js');
    drupal_add_css(drupal_get_path('module', 'token') . '/token.css');
    drupal_add_library('token', 'treeTable');

    $form['tokens'] = array(
      '#theme' => 'token_tree',
      '#token_types' => array(token_get_entity_mapping('entity', 'crm_core_contact')),
      '#dialog' => FALSE,
    );
  }

  return $form;
}

/**
 * Submit handler for 'crm_core_contact_send_email_action' action.
 */
function crm_core_contact_send_email_action_submit($form, FormStateInterface $form_state) {
  $subject = $form_state->getValue('subject');
  $message = $form_state->getValue('message');

  return array('subject' => $subject, 'message' => $message);
}

/**
 * Send e-mail to contacts action.
 */
function crm_core_contact_send_email_action($contact, $context) {

  // Token replacement preparations.
  $data = array(
    'crm_core_contact' => $contact,
  );
  $options = array(
    // Remove tokens that could not be found.
    'clear' => TRUE,
  );
  $subject = token_replace($context['subject'], $data, $options);
  $message = token_replace($context['message'], $data, $options);

  $contact_wrapper = entity_metadata_wrapper('crm_core_contact', $contact);
  $email = $contact_wrapper->primary_email->value();
  $params = array('subject' => $subject, 'message' => $message);
  drupal_mail('crm_core_contact', 'send_email', $email, language_default(), $params);
}

/**
 * Implements hook_mail().
 */
function crm_core_contact_mail($key, &$message, $params) {
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['message'];
}

/**
 * Implements hook_entity_dependencies().
 *
 * Adding contact activities and relationships as dependencies.
 */
function crm_core_contact_entity_dependencies($entity, $entity_type) {
  $dependencies = array();
  if ($entity_type == 'crm_core_contact') {
    // Lets check activities.
    if (module_exists('crm_core_activity')) {
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'crm_core_activity');
      $query->fieldCondition('field_activity_participants', 'target_id', $entity->contact_id);
      $query->fieldCondition('field_activity_participants', 'target_type', 'crm_core_contact');
      $result = $query->execute();
      if (!empty($result['crm_core_activity'])) {
        foreach (array_keys($result['crm_core_activity']) as $activity_id) {
          $dependencies[] = array('type' => 'crm_core_activity', 'id' => $activity_id);
        }
      }
    }
    // Lets check relations.
    if (module_exists('relation')) {
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'relation');
      $query->fieldCondition('endpoints', 'entity_id', $entity->contact_id);
      $result = $query->execute();
      if (!empty($result['relation'])) {
        foreach (array_keys($result['relation']) as $rid) {
          $dependencies[] = array('type' => 'relation', 'id' => $rid);
        }
      }
    }
  }

  return $dependencies;
}
