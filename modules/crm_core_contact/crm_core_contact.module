<?php

/**
 * @file
 * Provides default CRM Core Contact entities and the ability to create more.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\crm_core_contact\Entity\Contact;
use Drupal\crm_core_contact\Entity\ContactType;

// Integration with context.
module_load_include('inc', 'crm_core_contact', 'crm_core_contact.context');

/**
 * Implements hook_entity_property_info().
 *
 * Add entity metadata properties for contact primary fields and UUID
 * integration, if UUID is enabled.
 *
 * @see entity_metadata_entity_property_info()
 */
function crm_core_contact_entity_property_info() {
  $info['crm_core_contact']['properties']['primary_email'] = array(
    'label' => t('Primary email'),
    'type' => 'text',
    'description' => t('Get primary e-mail of CRM Core Contact.'),
    'getter callback' => 'crm_core_contact_get_primary_email_field_value',
    'computed' => TRUE,
  );

  $info['crm_core_contact']['properties']['primary_address'] = array(
    'label' => t('Primary address'),
    'type' => 'struct',
    'description' => t('Get primary address of CRM Core Contact.'),
    'getter callback' => 'crm_core_contact_get_primary_address_field_value',
    'computed' => TRUE,
  );

  $info['crm_core_contact']['properties']['primary_phone'] = array(
    'label' => t('Primary phone'),
    'type' => 'struct',
    'description' => t('Get primary phone of CRM Core Contact.'),
    'getter callback' => 'crm_core_contact_get_primary_phone_field_value',
    'computed' => TRUE,
  );

  if (module_exists('uuid')) {
    $info['crm_core_contact']['properties']['uuid'] = array(
      'label' => t('UUID'),
      'type' => 'text',
      'description' => t('The universally unique ID.'),
      'schema field' => 'uuid',
    );

    $info['crm_core_contact']['properties']['vuuid'] = array(
      'label' => t('Revision UUID'),
      'type' => 'text',
      'description' => t("The revision's universally unique ID."),
      'schema field' => 'vuuid',
    );
  }

  return $info;
}

/**
 * Implements hook_views_api().
 */
function crm_core_contact_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'crm_core_contact') . '/includes/views',
  );
}

/**
 * Implements hook_search_info().
 */
function crm_core_contact_search_info() {
  return array(
    'title' => 'CRM Core contacts',
    'path' => 'contact',
  );
}

/**
 * Implements hook_search_access().
 */
function crm_core_contact_search_access() {
  // @todo Review this when it comes to search integration.
  return TRUE;
}

/**
 * Implements hook_search_reset().
 */
function crm_core_contact_search_reset() {
  db_update('search_dataset')
    ->fields(array('reindex' => REQUEST_TIME))
    ->condition('type', 'crm_core_contact')
    ->execute();
}

/**
 * Implements hook_search_status().
 */
function crm_core_contact_search_status() {
  $total = db_query('SELECT COUNT(*) FROM {crm_core_contact}')->fetchField();
  $remaining = db_query("SELECT COUNT(*) FROM {crm_core_contact} c LEFT JOIN {search_dataset} d ON d.type = 'crm_core_contact' AND d.sid = c.contact_id WHERE d.sid IS NULL OR d.reindex <> 0")->fetchField();

  return array('remaining' => $remaining, 'total' => $total);
}

/**
 * Implements hook_search_execute().
 */
function crm_core_contact_search_execute($keys = NULL, $conditions = NULL) {
  // Build matching conditions.
  $query = db_select('search_index', 'i', array('target' => 'slave'))
    ->extend('SearchQuery')
    ->extend('PagerDefault');
  $query->join('crm_core_contact', 'c', 'c.contact_id = i.sid');
  $query->searchExpression($keys, 'crm_core_contact');

  // Insert special keywords.
  $query->setOption('type', 'c.type');
  $query->setOption('language', 'c.language');

  // Only continue if the first pass query matches.
  if (!$query->executeFirstPass()) {
    return array();
  }

  // Load results.
  $find = $query
    ->limit(10)
    ->execute();
  $results = array();
  foreach ($find as $item) {
    // Render the contact.
    $contact = crm_core_contact_load($item->sid);
    $build = crm_core_contact_view($contact);
    unset($build['#theme']);
    $contact->rendered = drupal_render($build);
    $title = field_get_items('crm_core_contact', $contact, 'contact_name');
    $title = name_format($title[0], '((((t+ig)+im)+if)+is)+jc');
    $uri = entity_uri('crm_core_contact', $contact);
    $results[] = array(
      'link' => url($uri['path'], array_merge($uri['options'], array('absolute' => TRUE))),
      'type' => check_plain(crm_core_contact_type_get_name($contact->type)),
      'title' => $title,
      'user' => theme('username', array('account' => user_load($contact->uid))),
      'date' => $contact->changed,
      'contact' => $contact,
      'score' => $item->calculated_score,
      'snippet' => search_excerpt($keys, $contact->rendered),
      'language' => (isset($contact->language)) ? $contact->language : LANGUAGE_NONE,
    );
  }

  return $results;
}

/**
 * Search condition callback.
 */
function crm_core_contact_search_conditions_callback($keys) {
  $conditions = array();

  if (!empty($_REQUEST['keys'])) {
    $conditions['keys'] = $_REQUEST['keys'];
  }
  if (!empty($_REQUEST['sample_search_keys'])) {
    $conditions['sample_search_keys'] = $_REQUEST['sample_search_keys'];
  }
  if ($force_keys = variable_get('sample_search_force_keywords', '')) {
    $conditions['sample_search_force_keywords'] = $force_keys;
  }

  return $conditions;
}

/**
 * Implements hook_update_index().
 */
function crm_core_contact_update_index() {
  $limit = (int) variable_get('search_cron_limit', 100);

  $result = db_query_range("SELECT c.contact_id FROM {crm_core_contact} c LEFT JOIN {search_dataset} d ON d.type = 'crm_core_contact' AND d.sid = c.contact_id WHERE d.sid IS NULL OR d.reindex <> 0 ORDER BY d.reindex ASC, c.contact_id ASC", 0, $limit);

  foreach ($result as $contact) {
    $contact = crm_core_contact_load($contact->contact_id);
    variable_set('crm_core_contact_cron_last', $contact->changed);

    // Render the contact.
    $text = drupal_render(crm_core_contact_view($contact));
    // Update index.
    search_index($contact->contact_id, 'crm_core_contact', $text);
  }
}

/**
 * Returns an array of contact type objects keyed by type.
 *
 * @param bool $active
 *   TRUE if we only want to select active contact types
 *   FALSE if we want to select all contact types
 *
 * @return \Drupal\crm_core_contact\Entity\ContactType[]
 *   An array of contact types indexed by their ids.
 *
 * @deprecated
 *  Use ContactType::loadMultiple() or ContactType::loadActive().
 */
function crm_core_contact_types($active = FALSE) {
  if ($active) {
    return ContactType::loadActive();
  }

  return ContactType::loadMultiple();
}

/**
 * Returns the human readable name of any or all contact types.
 *
 * @param string|null $type
 *   (optional) Specify the type whose name to return.
 *
 * @return
 *   If $type is specified, a string containing the human
 *   readable name of the type.
 *   If $type isn't specified an array containing all human
 *   readable names keyed on the machine type.
 */
function crm_core_contact_type_get_name($type = NULL) {
  $contact_types = ContactType::loadMultiple();

  // If type is set return the name if it exists.
  if (!empty($type)) {
    if (isset($contact_types[$type])) {
      return $contact_types[$type]->name;
    }
    else {
      return FALSE;
    }
  }

  // Otherwise return a mapping of type => name.
  foreach ($contact_types as $key => $value) {
    $contact_types[$key] = $value->name;
  }

  return $contact_types;
}

/**
 * Load a contact.
 *
 * @param string $contact_id
 *   Contact id of the contact to be loaded
 * @param array $conditions
 *   (optional) Conditions array.
 *
 * @return \Drupal\crm_core_contact\Entity\Contact
 *   A contact object upon successful load, FALSE if loading fails.
 *
 * @deprecated
 *   Use \Drupal\crm_core_contact\Entity\Contact::load() instead.
 */
function crm_core_contact_load($contact_id, $conditions = array()) {
  return Contact::load($contact_id);
}

/**
 * Load one or more contact.
 *
 * @param array $contact_ids
 *   An array of contact id to be loaded
 * @param array $conditions
 *   (deprecated) Does not have an effect anymore.
 *   An associative array of conditions on the base table
 *   with keys equal to the field name and value equal to
 *   the value the fields must have
 * @param bool $reset
 *   (deprecated) Does not have an effect anymore.
 *
 * @return \Drupal\crm_core_contact\Entity\Contact[]
 *   An array of entity object indexed by their ids.
 *
 * @deprecated
 *   Use \Drupal\crm_core_contact\Entity\Contact::loadMultiple() or use
 *   \Drupal::entityQuery() if conditions are needed.
 */
function crm_core_contact_load_multiple($contact_ids = array(), $conditions = array(), $reset = FALSE) {
  return Contact::loadMultiple($contact_ids);
}

/**
 * Delete multiple contact records.
 *
 * The wrapper for delete() method of 'crm_core_contact' controller.
 *
 * @param array $contact_ids
 *   Flat array of contact ids like array(5, 6, 7).
 *
 * @return bool
 *   TRUE or throw exception and write it to watchdog.
 */
function crm_core_contact_delete_multiple($contact_ids = array()) {
  \Drupal::entityTypeManager()->getStorage('crm_core_contact')->delete($contact_ids);
  return TRUE;
}

/**
 * View a single contact record.
 */
function crm_core_contact_view($contact, $view_mode = 'full') {
  $langcode = $GLOBALS['language_content']->language;
  module_invoke_all('entity_view', $contact, 'crm_core_contact', $view_mode, $langcode);
  $build = $contact->view($view_mode, $langcode);

  return $build;
}

/**
 * Implements hook_theme().
 */
function crm_core_contact_theme($existing, $type, $theme, $path) {
  return array(
    'contact' => array(
      'render element' => 'elements',
      'template' => 'contact',
      'path' => $path . '/templates',
    ),
    'crm_core_contact_merge_table' => array(
      'render element' => 'table',
      'file' => 'theme/crm_core_contact.theme.inc',
    ),
  );
}

/**
 * Process variables for contact.tpl.php.
 *
 * This function simply adds template suggestions for various
 * contact types.
 */
function template_preprocess_contact(&$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  $variables['contact'] = $variables['elements']['#contact'];
  $variables['content'] = $variables['elements']['#content'];

  // Add classes based on the type of contact.
  $variables['classes_array'][] = 'contact';
  $variables['classes_array'][] = 'contact-' . $variables['contact']->type;

  // Add template suggestions.
  $variables['theme_hook_suggestions'][] = 'contact__' . $variables['contact']->type;
}

/**
 * Title callback for a contact.
 *
 * @param object $contact
 *   Contact object.
 *
 * @return String
 *   Returns the string for the contact.
 *
 * @deprecated
 *   Use Contact::label() instead.
 */
function crm_core_contact_title($contact) {
  return $contact->label();
}

/**
 * Fetch revision list for a contact.
 *
 * @param object $contact
 *   Contact object.
 *
 * @return array
 *   An associative array of revision information for a given contact.
 *   Includes the following keys:
 *     - vid
 *     - revision_log
 *     - created
 *     - changed
 *     - uid
 */
function crm_core_contact_revision_list($contact) {
  return db_select('crm_core_contact_revision', 'rev')
    ->fields('rev', array('vid', 'revision_log', 'created', 'changed', 'uid'))
    ->condition('contact_id', $contact->contact_id)
    ->execute()
    ->fetchAllAssoc('vid');
}

/**
 * Return a contact object structure.
 *
 * @param object $contact
 *   Contact object.
 *
 * @return Object
 *   A structured contact string
 */
function crm_core_contact_devel_load_object($contact) {
  module_load_include('inc', 'devel', 'devel.pages');

  return devel_load_object('crm_core_contact', $contact);
}

/**
 * Print the contact structure being loaded.
 *
 * @param object $contact
 *   Contact object.
 *
 * @return Object
 *   Prints a structured contact object
 */
function crm_core_contact_devel_render_object($contact) {
  module_load_include('inc', 'devel', 'devel.pages');

  return devel_render_object('crm_core_contact', $contact);
}

/**
 * Revert a contact to a previous revision.
 *
 * @param object $contact
 *   Contact object.
 * @param int $vid
 *   Revision id.
 *
 * @return bool
 *   TRUE upon success, FALSE upon failure
 */
function crm_core_contact_revert($contact, $vid) {
  return entity_get_controller('crm_core_contact')->revertContact($contact, $vid);
}

/**
 * Implements hook_feeds_plugins().
 */
function crm_core_contact_feeds_plugins() {
  $info['CRMFeedsContactProcessor'] = array(
    'name' => 'CRM Core Contact processor',
    'description' => 'Create and update CRM Core Contacts.',
    'help' => 'Create and update CRM Core Contacts from parsed content.',
    'handler' => array(
      'parent' => 'FeedsProcessor',
      'class' => 'CRMFeedsContactProcessor',
      'file' => 'CRMFeedsContactProcessor.inc',
      'path' => drupal_get_path('module', 'crm_core_contact') . '/includes',
    ),
  );

  return $info;
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Adds OR logic when searching contacts by name.
 */
function crm_core_contact_query_crm_core_contact_search_alter(QueryAlterableInterface $query) {
  // TODO: get table and field names automatically.
  $table = 'field_data_contact_name';

  $fields = array(
    'title' => 'contact_name_title',
    'given' => 'contact_name_given',
    'middle' => 'contact_name_middle',
    'family' => 'contact_name_family',
    'generational' => 'contact_name_generational',
    'credentials' => 'contact_name_credentials',
  );
  // TODO: Figure out should we use 'starts from' or 'contains' pattern for search.
  $value = '%' . db_like($query->alterMetaData['match']) . '%';
  $placeholder = ':' . $table . '_fulltext';

  $field_list = array();
  foreach ($fields as $field_name => $column) {
    $field_list[] = "IF({$table}.{$column} = '', NULL, {$table}.{$column})";
  }
  $field_list = implode(', ', $field_list);

  $where_expression = "LOWER(CONCAT_WS(' ', $field_list)) LIKE $placeholder";
  $query->innerJoin($table, $table, "crm_core_contact.contact_id = {$table}.entity_id");
  $query->where($where_expression, array($placeholder => $value));
  // If set $query->addMetaData('user', TRUE); select contacts which have
  // associated users, FALSE without association.
  if (isset($query->alterMetaData['user'])) {
    $on_cond = "endpoints.endpoints_entity_type = 'crm_core_contact' AND endpoints.endpoints_entity_id = crm_core_contact.contact_id ";
    $query->leftJoin('field_data_endpoints', 'endpoints', $on_cond);
    $where_cond = 'endpoints.entity_id IS ';
    $where_cond .= empty($query->alterMetaData['user']) ? 'NULL' : 'NOT NULL';
    $query->where($where_cond);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * Lets the system know where our task and task_handler plugins are.
 */
function crm_core_contact_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'page_manager' && $plugin_type == 'tasks') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function crm_core_contact_form_field_ui_field_delete_form_alter(&$form, &$form_state, $form_id) {
  if ($form['entity_type']['#value'] == 'crm_core_contact'
    && $form['field_name']['#value'] == 'contact_name') {
    $warning = 'Think twice before hit "Delete" button. If you delete this'
      . ' field, your CRM installation will most likely BREAK!';
    drupal_set_message($warning, 'error');
  }
}

/**
 * Implements hook_action_info().
 *
 * Adds 2 action:
 *  - merge 2 or more contacts into household contact(non destructive)
 *  - merge 2 or more contacts(destructive)
 */
function crm_core_contact_action_info() {
  return array(
    'crm_core_contact_join_into_household_action' => array(
      'type' => 'crm_core_contact',
      'label' => t('Join into household'),
      'configurable' => TRUE,
      'triggers' => array('any'),
      'aggregate' => TRUE,
    ),
    'crm_core_contact_merge_contacts_action' => array(
      'type' => 'crm_core_contact',
      'label' => t('Merge contacts'),
      'configurable' => TRUE,
      'triggers' => array('any'),
      'aggregate' => TRUE,
    ),
    'crm_core_contact_send_email_action' => array(
      'type' => 'crm_core_contact',
      'label' => t('Send e-mail to contacts'),
      'configurable' => TRUE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Form builder for creating a household.
 */
function crm_core_contact_join_into_household_action_form($context, &$form_state) {
  module_load_include('inc', 'crm_core_contact_ui', 'crm_core_contact_ui.pages');
  $household = entity_create('crm_core_contact', array('type' => 'household'));
  $form = crm_core_contact_ui_form(array(), $form_state, $household);

  return $form;
}

/**
 * Validate handler for action configuration form.
 */
function crm_core_contact_join_into_household_action_validate($form, $form_state) {
  $household =& $form_state['crm_core_contact'];
  field_attach_form_validate('crm_core_contact', $household, $form, $form_state);
}

/**
 * Submit handler for action configuration form.
 */
function crm_core_contact_join_into_household_action_submit($form, $form_state) {
  $household =& $form_state['crm_core_contact'];
  field_attach_submit('crm_core_contact', $household, $form, $form_state);

  return array('household' => $household);
}

/**
 * Creates household with specified members.
 */
function crm_core_contact_join_into_household_action($selected_contacts, $context) {
  $household = $context['household'];
  // Saving household only now because user can click "Cancel" on confirmation
  // page(if he/she will notice that selected wrong contacts).
  $household->uid = $GLOBALS['user']->uid;
  $household->save();
  $relation_type = 'crm_member';
  foreach ($selected_contacts as $member) {

    if ($member->type == 'individual') {
      $endpoints = array(
        0 => array(
          'entity_type' => 'crm_core_contact',
          'entity_id' => $member->contact_id,
        ),
        1 => array(
          'entity_type' => 'crm_core_contact',
          'entity_id' => $household->contact_id,
        ),
      );
      $relation = relation_create($relation_type, $endpoints);
      relation_save($relation);
    }
  }
}

/**
 * Form builder for merging contacts.
 */
function crm_core_contact_merge_contacts_action_form($context, &$form_state) {

  $form = array();
  $selected_contacts = crm_core_contact_load_multiple($form_state['selection']);
  // Lets check contacts type, it should be unique.
  $contact_types = array();
  foreach ($selected_contacts as $contact) {
    $contact_types[] = $contact->type;
  }
  $contact_types = array_unique($contact_types);
  // All selected contacts have same type.
  if (count($contact_types) != 1) {
    $message = 'You should select contacts of one type to be able to merge them!';
    drupal_set_message(t($message), 'error');
    drupal_goto('crm-core/contact');
  }
  else {
    $form['table'] = array(
      '#theme' => 'crm_core_contact_merge_table',
      '#tree' => TRUE,
      '#selected' => $form_state['selection'],
    );
    // Creating header.
    $header['field_name'] = array('#markup' => t('Field name\\Contact'));
    foreach ($selected_contacts as $contact) {
      $header[$contact->contact_id] = array(
        '#type' => 'radio',
        '#title' => check_plain($contact->label()),
      );
    }
    $form['table']['contact_id'] = $header;
    $field_instances = field_info_instances('crm_core_contact', array_shift($contact_types));
    foreach ($field_instances as $field_name => $field_instance) {
      $form['table'][$field_name] = array();
      $row =& $form['table'][$field_name];
      $row['field_name'] = array('#markup' => check_plain($field_instance['label']));
      foreach ($selected_contacts as $contact) {
        $field_value = array('#markup' => '');
        if (isset($contact->{$field_name}[LANGUAGE_NONE][0])) {
          $item = $contact->{$field_name}[LANGUAGE_NONE][0];
          $field_value_render = field_view_value('crm_core_contact', $contact, $field_name, $item);
          $field_value_rendered = drupal_render($field_value_render);
          // This check is a must because some fields can provide empty markup.
          if (!empty($field_value_rendered)) {
            $field_value = array(
              '#type' => 'radio',
              '#title' => $field_value_rendered,
            );
          }
        }
        $row[$contact->contact_id] = $field_value;
      }
    }
  }

  $form['#attached']['js'] = array(
    drupal_get_path('module', 'crm_core_contact') . '/js/merge_table.js',
  );

  return $form;
}

/**
 * Validate handler for action configuration form.
 */
function crm_core_contact_merge_contacts_action_validate($form, FormStateInterface $form_state) {
  $table = $form_state->getValue('table');
  $primary_contact = array_filter($table['contact_id']);
  if (empty($primary_contact)) {
    form_set_error('table][contact_id', t('You must select primary contact in table header!'));
  }
  if (count($primary_contact) > 1) {
    form_set_error('table][contact_id', t('Supplied more than one primary contact!'));
  }
}

/**
 * Submit handler for action configuration form.
 */
function crm_core_contact_merge_contacts_action_submit($form, FormStateInterface $form_state) {
  $table = $form_state->getValue('table');
  $tmp = array_keys(array_filter($table['contact_id']));
  $data = array('contact_id' => array_shift($tmp));
  unset($table['contact_id']);
  foreach ($table as $field_name => $selection) {
    $tmp = array_keys(array_filter($selection));
    $data[$field_name] = array_shift($tmp);
  }

  return array('data' => array_filter($data));
}

/**
 * Merge contacts.
 */
function crm_core_contact_merge_contacts_action($selected_contacts, $context) {
  $data = $context['data'];
  $primary_contact = $selected_contacts[$data['contact_id']];
  $pcid = $primary_contact->contact_id;
  $pcw = entity_metadata_wrapper('crm_core_contact', $primary_contact);
  unset($selected_contacts[$data['contact_id']]);
  unset($data['contact_id']);
  $wrappers = array();
  foreach ($selected_contacts as $cid => $contact) {
    $wrappers[$cid] = entity_metadata_wrapper('crm_core_contact', $contact);
  }
  // Updating primary contact fields from other selected contacts.
  foreach ($data as $field_name => $contact_id) {
    if ($pcid != $contact_id) {
      $pcw->{$field_name}->set($wrappers[$contact_id]->{$field_name}->value());
    }
  }
  $pcw->save();
  foreach (array_keys($selected_contacts) as $contact_id) {
    // Creating path aliases for contacts that will be deleted.
    $path = array(
      'alias' => 'crm-core/contact/' . $contact_id,
      'source' => 'crm-core/contact/' . $pcid,
    );
    path_save($path);

    if (module_exists('crm_core_activity')) {
      // Replacing participant in existing activities.
      $query = new EntityFieldQuery();
      $activities = $query->entityCondition('entity_type', 'crm_core_activity')
        ->fieldCondition('field_activity_participants', 'target_id', $contact_id)
        ->execute();
      if (is_array($activities) && isset($activities['crm_core_activity'])) {
        foreach (array_keys($activities['crm_core_activity']) as $activity_id) {
          $aw = entity_metadata_wrapper('crm_core_activity', $activity_id);
          foreach ($aw->field_activity_participants->getIterator() as $delta => $cw) {
            if ($cw->getIdentifier() == $contact_id) {
              $aw->field_activity_participants[$delta]->set($pcid);
            }
          }
          $aw->save();
        }
      }
    }

    if (module_exists('relation')) {
      // Replacing existing relations for contacts been deleted with new ones.
      $relations = relation_query('crm_core_contact', $contact_id)->execute();
      foreach ($relations as $relation_info) {
        $endpoints = array(
          array('entity_type' => 'crm_core_contact', 'entity_id' => $pcid),
        );
        $relation_wrapper = entity_metadata_wrapper('relation', $relation_info->rid);
        foreach ($relation_wrapper->endpoints->getIterator() as $endpoint_wrapper) {
          if ($endpoint_wrapper->getIdentifier() != $contact_id) {
            $endpoints[] = array(
              'entity_type' => $endpoint_wrapper->type(),
              'entity_id' => $endpoint_wrapper->getIdentifier(),
            );
          }
        }

        $relation = relation_create($relation_info->relation_type, $endpoints);
        relation_save($relation);
      }
    }
  }

  module_invoke_all('crm_core_contact_merge_contacts', $primary_contact, $selected_contacts);
  crm_core_contact_delete_multiple(array_keys($selected_contacts));
  $count = count($selected_contacts);
  $singular = '%contacts contact merged to %dest.';
  $plural = '%contacts contacts merged to %dest.';
  $contacts_label = array();
  foreach ($selected_contacts as $contact) {
    $contacts_label[] = $contact->label();
  }
  $message = format_plural($count, $singular, $plural, array(
    '%contacts' => implode(', ', $contacts_label),
    '%dest' => $primary_contact->label(),
  ));
  drupal_set_message($message);
}

/**
 * Field base settings for 'contact_name' field.
 */
function _crm_core_contact_contact_name_base() {

  $field_base = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'contact_name',
    'foreign keys' => array(),
    'indexes' => array(
      'family' => array(
        0 => 'family',
      ),
      'given' => array(
        0 => 'given',
      ),
    ),
    'locked' => 0,
    'module' => 'name',
    'settings' => array(
      'allow_family_or_given' => 0,
      'autocomplete_separator' => array(
        'credentials' => ', ',
        'family' => ' -',
        'generational' => ' ',
        'given' => ' -',
        'middle' => ' -',
        'title' => ' ',
      ),
      'autocomplete_source' => array(
        'credentials' => array(),
        'family' => array(),
        'generational' => array(
          'generational' => 0,
        ),
        'given' => array(),
        'middle' => array(),
        'title' => array(
          'title' => 'title',
        ),
      ),
      'components' => array(
        'credentials' => 'credentials',
        'family' => 'family',
        'generational' => 'generational',
        'given' => 'given',
        'middle' => 'middle',
        'title' => 'title',
      ),
      'generational_options' => '-- --
Jr.
Sr.
I
II
III
IV
V
VI
VII
VIII
IX
X',
      'labels' => array(
        'credentials' => 'Credentials',
        'family' => 'Last',
        'generational' => 'Generational',
        'given' => 'First',
        'middle' => 'Middle',
        'title' => 'Title',
      ),
      'max_length' => array(
        'credentials' => 255,
        'family' => 63,
        'generational' => 15,
        'given' => 63,
        'middle' => 127,
        'title' => 31,
      ),
      'minimum_components' => array(
        'credentials' => 0,
        'family' => 'family',
        'generational' => 0,
        'given' => 'given',
        'middle' => 0,
        'title' => 0,
      ),
      'sort_options' => array(
        'generational' => 0,
        'title' => 'title',
      ),
      'title_options' => '-- --
Mr.
Mrs.
Miss
Ms.
Dr.
Prof.',
    ),
    'translatable' => 0,
    'type' => 'name',
  );

  return $field_base;
}

/**
 * Field instance settings for 'contact_name' field.
 */
function _crm_core_contact_contact_name_instance($type, $label) {

  $instance = array(
    'bundle' => $type,
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'name',
        'settings' => array(
          'format' => 'default',
          'markup' => 0,
          'multiple' => 'default',
          'multiple_and' => 'text',
          'multiple_delimiter' => ', ',
          'multiple_delimiter_precedes_last' => 'never',
          'multiple_el_al_first' => 1,
          'multiple_el_al_min' => 3,
          'output' => 'default',
        ),
        'type' => 'name_formatter',
      ),
    ),
    'entity_type' => 'crm_core_contact',
    'field_name' => 'contact_name',
    'label' => $label,
    'required' => 0,
    'settings' => array(
      'component_css' => '',
      'component_layout' => 'default',
      'components' => array(
        'credentials' => 0,
        'family' => 0,
        'generational' => 0,
        'given' => 0,
        'middle' => 0,
        'title' => 0,
      ),
      'credentials_inline' => 0,
      'field_type' => array(
        'credentials' => 'text',
        'family' => 'text',
        'generational' => 'select',
        'given' => 'text',
        'middle' => 'text',
        'title' => 'select',
      ),
      'generational_field' => 'select',
      'inline_css' => array(
        'credentials' => '',
        'family' => '',
        'generational' => '',
        'given' => '',
        'middle' => '',
        'title' => '',
      ),
      'labels' => array(
        'credentials' => '',
        'family' => '',
        'generational' => '',
        'given' => '',
        'middle' => '',
        'title' => '',
      ),
      'minimum_components' => array(
        'credentials' => 0,
        'family' => 0,
        'generational' => 0,
        'given' => 0,
        'middle' => 0,
        'title' => 0,
      ),
      'override_format' => 'default',
      'show_component_required_marker' => 0,
      'size' => array(
        'credentials' => 35,
        'family' => 20,
        'generational' => 5,
        'given' => 20,
        'middle' => 20,
        'title' => 6,
      ),
      'title_display' => array(
        'credentials' => 'description',
        'family' => 'description',
        'generational' => 'description',
        'given' => 'description',
        'middle' => 'description',
        'title' => 'description',
      ),
      'title_field' => 'select',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'name',
      'settings' => array(),
      'type' => 'name_widget',
    ),
  );

  $title_display_settings = array(
    'credentials' => 'none',
    'family' => 'description',
    'generational' => 'none',
    'given' => 'none',
    'middle' => 'none',
    'title' => 'none',
  );

  switch ($type) {
    case 'household':
      $instance['settings']['components']['family'] = 'family';
      $instance['settings']['labels']['family'] = sprintf('%s name', $label);
      $instance['settings']['minimum_components']['family'] = 'family';
      $instance['settings']['title_display'] = $title_display_settings;
      break;

    case 'organization':
      $instance['settings']['components']['family'] = 'family';
      $instance['settings']['labels']['family'] = sprintf('%s name', $label);
      $instance['settings']['minimum_components']['family'] = 'family';
      $instance['settings']['title_display'] = $title_display_settings;

      break;
  }

  return $instance;
}

/**
 * Form builder for 'crm_core_contact_send_email_action' action.
 */
function crm_core_contact_send_email_action_form($context, FormStateInterface $form_state) {

  $form = array();
  $form['subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#description' => t('The subject of the message.'),
    '#default_value' => $form_state->getValue('subject', ''),
  );

  $form['message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#description' => t('The message that should be sent.'),
    '#default_value' => $form_state->getValue('message', ''),
  );

  // Display a list of tokens that can be used in the message.
  if (module_exists('token')) {
    // Lets extend description of message field.
    $token_description = 'You may include placeholders here to represent data'
      . ' that will be different each time message is sent. You can find list'
      . ' of available placeholder in the table below.';
    $form['message']['#description'] .= t($token_description);

    // We must load token values here to show them on the options form.
    drupal_add_js(drupal_get_path('module', 'token') . '/token.js');
    drupal_add_css(drupal_get_path('module', 'token') . '/token.css');
    drupal_add_library('token', 'treeTable');

    $form['tokens'] = array(
      '#theme' => 'token_tree',
      '#token_types' => array(token_get_entity_mapping('entity', 'crm_core_contact')),
      '#dialog' => FALSE,
    );
  }

  return $form;
}

/**
 * Submit handler for 'crm_core_contact_send_email_action' action.
 */
function crm_core_contact_send_email_action_submit($form, FormStateInterface $form_state) {
  $subject = $form_state->getValue('subject');
  $message = $form_state->getValue('message');

  return array('subject' => $subject, 'message' => $message);
}

/**
 * Send e-mail to contacts action.
 */
function crm_core_contact_send_email_action($contact, $context) {

  // Token replacement preparations.
  $data = array(
    'crm_core_contact' => $contact,
  );
  $options = array(
    // Remove tokens that could not be found.
    'clear' => TRUE,
  );
  $subject = token_replace($context['subject'], $data, $options);
  $message = token_replace($context['message'], $data, $options);

  $contact_wrapper = entity_metadata_wrapper('crm_core_contact', $contact);
  $email = $contact_wrapper->primary_email->value();
  $params = array('subject' => $subject, 'message' => $message);
  drupal_mail('crm_core_contact', 'send_email', $email, language_default(), $params);
}

/**
 * Implements hook_mail().
 */
function crm_core_contact_mail($key, &$message, $params) {
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['message'];
}

/**
 * Implements hook_entity_dependencies().
 *
 * Adding contact activities and relationships as dependencies.
 */
function crm_core_contact_entity_dependencies($entity, $entity_type) {
  $dependencies = array();
  if ($entity_type == 'crm_core_contact') {
    // Lets check activities.
    if (module_exists('crm_core_activity')) {
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'crm_core_activity');
      $query->fieldCondition('field_activity_participants', 'target_id', $entity->contact_id);
      $result = $query->execute();
      if (!empty($result['crm_core_activity'])) {
        foreach (array_keys($result['crm_core_activity']) as $activity_id) {
          $dependencies[] = array('type' => 'crm_core_activity', 'id' => $activity_id);
        }
      }
    }
    // Lets check relations.
    if (module_exists('relation')) {
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'relation');
      $query->fieldCondition('endpoints', 'entity_id', $entity->contact_id);
      $result = $query->execute();
      if (!empty($result['relation'])) {
        foreach (array_keys($result['relation']) as $rid) {
          $dependencies[] = array('type' => 'relation', 'id' => $rid);
        }
      }
    }
  }

  return $dependencies;
}
